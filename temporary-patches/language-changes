diff --git a/java.compiler/share/classes/javax/lang/model/util/ElementScanner14.java b/java.compiler/share/classes/javax/lang/model/util/ElementScanner14.java
index 5e5d484fa83..905a7d4f4ff 100644
--- a/java.compiler/share/classes/javax/lang/model/util/ElementScanner14.java
+++ b/java.compiler/share/classes/javax/lang/model/util/ElementScanner14.java
@@ -128,7 +128,7 @@ public class ElementScanner14<R, P> extends ElementScanner9<R, P> {
 
     private List<? extends Element> createScanningList(Parameterizable element,
                                                        List<? extends Element> toBeScanned) {
-        var typeParameters = element.getTypeParameters();
+        List<? extends TypeParameterElement> typeParameters = element.getTypeParameters();
         if (typeParameters.isEmpty()) {
             return toBeScanned;
         } else {
diff --git a/java.compiler/share/classes/javax/tools/StandardJavaFileManager.java b/java.compiler/share/classes/javax/tools/StandardJavaFileManager.java
index 2fee7e2673a..a4753382c9a 100644
--- a/java.compiler/share/classes/javax/tools/StandardJavaFileManager.java
+++ b/java.compiler/share/classes/javax/tools/StandardJavaFileManager.java
@@ -479,8 +479,8 @@ public interface StandardJavaFileManager extends JavaFileManager {
     default void setPathFactory(PathFactory f) { }
 
 
-    private static Iterable<Path> asPaths(final Iterable<? extends File> files) {
-        return () -> new Iterator<>() {
+    /*private */static Iterable<Path> asPaths(final Iterable<? extends File> files) {
+        return () -> new Iterator<Path>() {
             final Iterator<? extends File> iter = files.iterator();
 
             @Override
@@ -495,8 +495,8 @@ public interface StandardJavaFileManager extends JavaFileManager {
         };
     }
 
-    private static Iterable<File> asFiles(final Iterable<? extends Path> paths) {
-        return () -> new Iterator<>() {
+    /*private */static Iterable<File> asFiles(final Iterable<? extends Path> paths) {
+        return () -> new Iterator<File>() {
             final Iterator<? extends Path> iter = paths.iterator();
 
             @Override
@@ -516,7 +516,7 @@ public interface StandardJavaFileManager extends JavaFileManager {
         };
     }
 
-    private static <T> Collection<T> asCollection(Iterable<T> iterable) {
+    /*private */ static <T> Collection<T> asCollection(Iterable<T> iterable) {
         if (iterable instanceof Collection) {
             return (Collection<T>) iterable;
         }
diff --git a/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java b/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java
index 3a66838729f..b9034771d86 100644
--- a/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java
+++ b/jdk.compiler/share/classes/com/sun/source/util/DocTreePath.java
@@ -155,7 +155,7 @@ public class DocTreePath implements Iterable<DocTree> {
 
     @Override
     public Iterator<DocTree> iterator() {
-        return new Iterator<>() {
+        return new Iterator<DocTree>() {
             @Override
             public boolean hasNext() {
                 return next != null;
diff --git a/jdk.compiler/share/classes/com/sun/source/util/TreePath.java b/jdk.compiler/share/classes/com/sun/source/util/TreePath.java
index 26c857721a3..c2a213d7418 100644
--- a/jdk.compiler/share/classes/com/sun/source/util/TreePath.java
+++ b/jdk.compiler/share/classes/com/sun/source/util/TreePath.java
@@ -143,7 +143,7 @@ public class TreePath implements Iterable<Tree> {
      */
     @Override
     public Iterator<Tree> iterator() {
-        return new Iterator<>() {
+        return new Iterator<Tree>() {
             @Override
             public boolean hasNext() {
                 return next != null;
diff --git a/jdk.compiler/share/classes/com/sun/tools/doclint/DocLint.java b/jdk.compiler/share/classes/com/sun/tools/doclint/DocLint.java
index f14aa349d10..04d110a7399 100644
--- a/jdk.compiler/share/classes/com/sun/tools/doclint/DocLint.java
+++ b/jdk.compiler/share/classes/com/sun/tools/doclint/DocLint.java
@@ -53,7 +53,7 @@ public abstract class DocLint implements Plugin {
             docLintProvider = ServiceLoader.load(DocLint.class).stream()
                     .filter(p_ -> p_.get().getName().equals("doclint"))
                     .findFirst()
-                    .orElse(new ServiceLoader.Provider<>() {
+                    .orElse(new ServiceLoader.Provider<DocLint>() {
                         @Override
                         public Class<? extends DocLint> type() {
                             return NoDocLint.class;
diff --git a/jdk.compiler/share/classes/com/sun/tools/javac/code/Source.java b/jdk.compiler/share/classes/com/sun/tools/javac/code/Source.java
index 72e92107bb7..5a5e9e8ab3e 100644
--- a/jdk.compiler/share/classes/com/sun/tools/javac/code/Source.java
+++ b/jdk.compiler/share/classes/com/sun/tools/javac/code/Source.java
@@ -158,22 +158,22 @@ public enum Source {
     }
 
     public Target requiredTarget() {
-        return switch(this) {
-        case JDK16  -> Target.JDK1_16;
-        case JDK15  -> Target.JDK1_15;
-        case JDK14  -> Target.JDK1_14;
-        case JDK13  -> Target.JDK1_13;
-        case JDK12  -> Target.JDK1_12;
-        case JDK11  -> Target.JDK1_11;
-        case JDK10  -> Target.JDK1_10;
-        case JDK9   -> Target.JDK1_9;
-        case JDK8   -> Target.JDK1_8;
-        case JDK7   -> Target.JDK1_7;
-        case JDK6   -> Target.JDK1_6;
-        case JDK5   -> Target.JDK1_5;
-        case JDK1_4 -> Target.JDK1_4;
-        default     -> Target.JDK1_1;
-        };
+        switch(this) {
+        case JDK16: return Target.JDK1_16;
+        case JDK15: return Target.JDK1_15;
+        case JDK14: return Target.JDK1_14;
+        case JDK13: return Target.JDK1_13;
+        case JDK12: return Target.JDK1_12;
+        case JDK11: return Target.JDK1_11;
+        case JDK10: return Target.JDK1_10;
+        case JDK9 : return Target.JDK1_9;
+        case JDK8 : return Target.JDK1_8;
+        case JDK7 : return Target.JDK1_7;
+        case JDK6 : return Target.JDK1_6;
+        case JDK5 : return Target.JDK1_5;
+        case JDK1_4: return Target.JDK1_4;
+        default   : return Target.JDK1_1;
+        }
     }
 
     /**
@@ -280,23 +280,23 @@ public enum Source {
     }
 
     public static SourceVersion toSourceVersion(Source source) {
-        return switch(source) {
-        case JDK1_2 -> RELEASE_2;
-        case JDK1_3 -> RELEASE_3;
-        case JDK1_4 -> RELEASE_4;
-        case JDK5   -> RELEASE_5;
-        case JDK6   -> RELEASE_6;
-        case JDK7   -> RELEASE_7;
-        case JDK8   -> RELEASE_8;
-        case JDK9   -> RELEASE_9;
-        case JDK10  -> RELEASE_10;
-        case JDK11  -> RELEASE_11;
-        case JDK12  -> RELEASE_12;
-        case JDK13  -> RELEASE_13;
-        case JDK14  -> RELEASE_14;
-        case JDK15  -> RELEASE_15;
-        case JDK16  -> RELEASE_16;
-        default     -> null;
-        };
+        switch(source) {
+        case JDK1_2: return RELEASE_2;
+        case JDK1_3: return RELEASE_3;
+        case JDK1_4: return RELEASE_4;
+        case JDK5  : return RELEASE_5;
+        case JDK6  : return RELEASE_6;
+        case JDK7  : return RELEASE_7;
+        case JDK8  : return RELEASE_8;
+        case JDK9  : return RELEASE_9;
+        case JDK10 : return RELEASE_10;
+        case JDK11 : return RELEASE_11;
+        case JDK12 : return RELEASE_12;
+        case JDK13 : return RELEASE_13;
+        case JDK14 : return RELEASE_14;
+        case JDK15 : return RELEASE_15;
+        case JDK16 : return RELEASE_16;
+        default    : return null;
+        }
     }
 }
diff --git a/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
index 1ca0645ad65..20b586110df 100644
--- a/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -3849,10 +3849,10 @@ public class Check {
             Feature.MODULES.allowedInSource(source)) {
             NestingKind nestingKind = c.getNestingKind();
             switch (nestingKind) {
-                case ANONYMOUS,
-                     LOCAL -> {return;}
-                case TOP_LEVEL -> {;} // No additional checks needed
-                case MEMBER -> {
+                case ANONYMOUS:
+                case LOCAL: {return;}
+                case TOP_LEVEL: {break;} // No additional checks needed
+                case MEMBER: {
                     // For nested member classes, all the enclosing
                     // classes must be public or protected.
                     Symbol owner = c.owner;
@@ -3861,6 +3861,7 @@ public class Check {
                             return;
                         owner = owner.owner;
                     }
+                    break;
                 }
             }
 
diff --git a/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java b/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java
index 0f2fc5c0c93..24e45dd1b8a 100644
--- a/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java
+++ b/jdk.compiler/share/classes/com/sun/tools/javac/comp/Flow.java
@@ -1269,7 +1269,7 @@ public class Flow {
                         ctypes = ctypes.append(exc);
                         if (types.isSameType(exc, syms.objectType))
                             continue;
-                        var pos = subClauses.size() > 1 ? ct.pos() : l.head.pos();
+                        DiagnosticPosition pos = subClauses.size() > 1 ? ct.pos() : l.head.pos();
                         checkCaughtType(pos, exc, thrownInTry, caughtInTry);
                         caughtInTry = chk.incl(exc, caughtInTry);
                     }
diff --git a/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java b/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
index d03fbd52e52..cd6742aca77 100644
--- a/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
+++ b/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
@@ -4277,24 +4277,26 @@ public class JavacParser implements Parser {
     }
 
     private boolean allowedAfterSealedOrNonSealed(Token next, boolean local, boolean currentIsNonSealed) {
-        return local ?
+        if (local) {
             switch (next.kind) {
-                case MONKEYS_AT -> {
+                case MONKEYS_AT: {
                     Token afterNext = S.token(2);
-                    yield afterNext.kind != INTERFACE || currentIsNonSealed;
+                    return afterNext.kind != INTERFACE || currentIsNonSealed;
                 }
-                case ABSTRACT, FINAL, STRICTFP, CLASS, INTERFACE, ENUM -> true;
-                default -> false;
-            } :
+                case ABSTRACT: case FINAL: case STRICTFP: case CLASS: case INTERFACE: case ENUM: return true;
+                default: return false;
+            }
+        } else {
             switch (next.kind) {
-                case MONKEYS_AT -> {
+                case MONKEYS_AT: {
                     Token afterNext = S.token(2);
-                    yield afterNext.kind != INTERFACE || currentIsNonSealed;
+                    return afterNext.kind != INTERFACE || currentIsNonSealed;
                 }
-                case PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, FINAL, STRICTFP, CLASS, INTERFACE, ENUM -> true;
-                case IDENTIFIER -> isNonSealedIdentifier(next, currentIsNonSealed ? 3 : 1) || next.name() == names.sealed;
-                default -> false;
-            };
+                case PUBLIC: case PROTECTED: case PRIVATE: case ABSTRACT: case STATIC: case FINAL: case STRICTFP: case CLASS: case INTERFACE: case ENUM: return true;
+                case IDENTIFIER: return isNonSealedIdentifier(next, currentIsNonSealed ? 3 : 1) || next.name() == names.sealed;
+                default: return false;
+            }
+        }
     }
 
     /** MethodDeclaratorRest =
diff --git a/jdk.compiler/share/classes/com/sun/tools/javac/processing/JavacRoundEnvironment.java b/jdk.compiler/share/classes/com/sun/tools/javac/processing/JavacRoundEnvironment.java
index 9f2bdd4c19b..37c36254731 100644
--- a/jdk.compiler/share/classes/com/sun/tools/javac/processing/JavacRoundEnvironment.java
+++ b/jdk.compiler/share/classes/com/sun/tools/javac/processing/JavacRoundEnvironment.java
@@ -124,7 +124,7 @@ public class JavacRoundEnvironment implements RoundEnvironment {
 
         Set<Element> result = Collections.emptySet();
         @SuppressWarnings("preview")
-        var scanner = new AnnotationSetScanner(result);
+        AnnotationSetScanner scanner = new AnnotationSetScanner(result);
 
         for (Element element : rootElements)
             result = scanner.scan(element, a);
@@ -145,7 +145,7 @@ public class JavacRoundEnvironment implements RoundEnvironment {
 
         Set<Element> result = Collections.emptySet();
         @SuppressWarnings("preview")
-        var scanner = new AnnotationSetMultiScanner(result);
+        AnnotationSetMultiScanner scanner = new AnnotationSetMultiScanner(result);
 
         for (Element element : rootElements)
             result = scanner.scan(element, annotationSet);
